using Azure;
using Azure.AI.Inference;
using Microsoft.Extensions.AI;
using ProductProgamming04042025.Pages.Models;
using Newtonsoft.Json;
using Microsoft.Extensions.Logging;
using System.Collections;
using Microsoft.Build.Framework;
using Org.BouncyCastle.Asn1.Cmp;
using System.Runtime.InteropServices;

namespace ProductProgamming04042025.AI
{
    public class Bot
    {
        private readonly AzureKeyCredential _credential;
        private readonly string _modelName;
        private readonly Uri _modelEndpoint;
        private readonly IChatClient _chatClient;

        public Bot(string token, string modelName)
        {
            _credential = new(token);
            _modelName = modelName;
            _modelEndpoint = new Uri("https://models.inference.ai.azure.com");
            _chatClient = new ChatCompletionsClient(_modelEndpoint, _credential)
                .AsChatClient(_modelName);
        }


        public async Task<object[]> SendRequest(string request, UserProfile userProfile)
        {
            string textResponse = string.Empty;

            try
            {
                string prompt = BuildPrompt(request, userProfile);
                var response = _chatClient.CompleteStreamingAsync(prompt);

                if (response == null)
                {
                    Console.WriteLine("Не получилось получить ответ от нейросети - он равен null");
                    throw new NullReferenceException("AI response is null");
                }

                string collectedResponse = await CollectResponse(response);
                //string jsonAnswer = SanitizeJson(collectedResponse);
                // Разделяем ответ на текстовую часть и JSON
                var parts = collectedResponse.Split(new[] { "===JSON===" }, StringSplitOptions.RemoveEmptyEntries);

                if (parts.Length > 0)
                {
                    textResponse = parts[0].Trim();
                }

                string jsonAnswer = parts.Length > 1 ? SanitizeJson(parts[1]) : "{}";

                Console.WriteLine($"Ответ нейросети: {jsonAnswer}");

                var settings = new JsonSerializerSettings
                {
                    MissingMemberHandling = MissingMemberHandling.Ignore,
                    NullValueHandling = NullValueHandling.Ignore,
                };

                // Временно парсим со string-ключом
                var rawPlan = JsonConvert.DeserializeObject<Dictionary<string, DayPlan>>(jsonAnswer);
                
                if (rawPlan == null)
                {
                    Console.WriteLine("Не удбалось десериализовать фитнес-план");
                    throw new JsonSerializationException("Failed to deserialize fitness plan");
                }

                // Конвертируем в FitnessPlan
                var fitnessPlan = new FitnessPlan
                {
                    WeekPlan = rawPlan.ToDictionary(
                        kvp => int.Parse(kvp.Key), // Конвертируем ключ из string в int
                        kvp => kvp.Value
                    )
                };

            return new object[] { textResponse, fitnessPlan };
        }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message, "Ошибка в SendRequest");
                throw;
            }
        }

        private string BuildPrompt(string request, UserProfile userProfile)
        {
            string prompt =
                $"Система: Вы - спортивный тренер и диетолог, разрабатывающий план тренировок в совокупности с питанием на неделю. " +
                $"Вы подбираете наиболее оптимальные набор упражнений и питания ИСКЛЮЧИТЕЛЬНО из предоставленных списков. " +
                $"Создайте персонализированный недельный план. " +
                $"Учти параметры пользователя, которые будет переданы далее, а из запроса пользователя извлеки цель, которой он хочет достичь " +
                $"(например набор мышечной массы, похудение, и так далее)." +
                $"Параметры пользователя:\n" +
                $"- Возраст: {userProfile.Age};\n" +
                $"- Пол: {(userProfile.Sex ? "мужской" : "женский")};\n" +
                $"- Рост: {userProfile.Height} см;\n" +
                $"- Вес: {userProfile.Weight} кг.\n" +
                $"Список доступных упражнений (укажи ID в квадратных скобках):\n" +
                $"0 [Жим штанги лежа (горизонтальный)], 1 [Жим гантелей лежа], 2 [Жим штанги на наклонной скамье (головой вверх)], " +
                $"3 [Жим штанги на наклонной скамье (головой вниз)], 4 [Отжимания от пола], 5 [Отжимания на брусьях (акцент на грудь)], " +
                $"6 [Разводка гантелей лежа], 7 [Разводка гантелей лежа], 8 [Кроссоверы в блочном тренажере], 9 [Жим в тренажере Смита], " +
                $"10 [Подтягивания широким хватом], 11 [Тяга штанги в наклоне], 12 [Тяга гантели одной рукой], 13 [Тяга Т-грифа], " +
                $"14 [Тяга верхнего блока широким хватом], 15 [Тяга нижнего блока (горизонтальная)], 16 [Гиперэкстензия], " +
                $"17 [Шраги со штангой], 18 [Шраги с гантелями], 19 [Становая тяга], 20 [Приседания со штангой], " +
                $"21 [Приседания со штангой], 22 [Фронтальные приседания], 23 [Жим ногами в тренажере], " +
                $"24 [Выпады со штангой], 25 [Выпады с гантелями], 26 [Болгарские сплит-приседания], " +
                $"27 [Румынская тяга], 28 [Мертвая тяга на прямых ногах], 29 [Подъем на носки стоя], " +
                $"30 [Подъем на носки сидя], 31 [Жим штанги стоя (армейский жим)], 32 [Жим гантелей сидя], " +
                $"33 [Махи гантелями в стороны], 34 [Махи гантелями перед собой], 35 [Махи в наклоне (задние дельты)], " +
                $"36 [Тяга штанги к подбородку], 37 [Жим Арнольда], 38 [Подъем гантелей перед собой], " +
                $"39 [Разводка в тренажере (обратная бабочка)], 40 [Жим в тренажере для плеч], " +
                $"41 [Подъем штанги на бицепс], 42 [Подъем гантелей на бицепс], 43 [Молотковые сгибания], " +
                $"44 [Концентрированные подъемы на бицепс], 45 [Подъем на бицепс в блоке], " +
                $"46 [Отжимания на трицепс (узкий хват)], 47 [Французский жим лежа], " +
                $"48 [Разгибания рук в блоке (канат/прямая рукоять)], 49 [Отжимания от скамьи (обратные)], " +
                $"50 [Жим узким хватом], 51 [Скручивания на полу], 52 [Подъем ног в висе], " +
                $"53 [Планка (классическая)], 54 [Боковая планка], 55 [Русские скручивания], " +
                $"56 [Велосипедные скручивания], 57 [Подъем корпуса на римском стуле], " +
                $"58 [Альпинист (Mountain climbers)], 59 [Дровосек в блочном тренажере], 60 [Вакуум живота]\n\n" +
                $"Список доступных блюд (укажи ID в квадратных скобках):\n" +
                $"61 [Омлет с овощами], 62 [Творог 0% с зеленью], 63 [Куриная грудка на пару с брокколи], " +
                $"64 [Салат Греческий (без масла)], 65 [Тыквенный суп-пюре], 66 [Запеченная рыба (треска) с лимоном], " +
                $"67 [Овсянка на воде с ягодами], 68 [Салат из тунца с огурцом], 69 [Гречневая каша с грибами], " +
                $"70 [Творожная запеканка без сахара], 71 [Куриные котлеты на пару с гречкой], " +
                $"72 [Лосось с киноа и овощами], 73 [Паста из твердых сортов с томатным соусом и индейкой], " +
                $"74 [Говяжий стейк с запеченными овощами], 75 [Творог 5% с медом и орехами], " +
                $"76 [Омлет с сыром и шпинатом], 77 [Фаршированные перцы с фаршем и рисом], " +
                $"78 [Смузи из банана, овсянки и протеина], 79 [Суп-лапша с курицей], " +
                $"80 [Запеченная индейка с тыквой], 81 [Паста Карбонара (с беконом и сливками)], " +
                $"82 [Жареная курица с картофелем], 83 [Гранола с орехами и медом], " +
                $"84 [Стейк из свинины с пюре], 85 [Протеиновые оладьи с арахисовой пастой], " +
                $"86 [Рис с курицей и овощами в сливочном соусе], 87 [Овсянка на молоке с орехами и сухофруктами], " +
                $"88 [Сэндвич с индейкой, сыром и авокадо], 89 [Чечевичный суп с копченостями], " +
                $"90 [Творожная масса с орехами и сгущенкой], 91 [Яичница с авокадо и цельнозерновым хлебом], " +
                $"92 [Овсяноблин с творогом], 93 [Гречневая каша с молоком], " +
                $"94 [Тост с арахисовой пастой и бананом], 95 [Сырники из творога], " +
                $"96 [Салат Цезарь с курицей], 97 [Салат с тунцом и яйцом], " +
                $"98 [Авокадо с креветками], 99 [Фета с арбузом и мятой], " +
                $"100 [Овощной салат с оливковым маслом], 101 [Куриный бульон с лапшой], " +
                $"102 [Томатный суп с базиликом], 103 [Грибной крем-суп], " +
                $"104 [Борщ с говядиной], 105 [Суп-пюре из брокколи], " +
                $"106 [Запеченная курица с картофелем], 107 [Говядина с рисом], " +
                $"108 [Лосось с булгуром], 109 [Котлеты из индейки с гречкой], " +
                $"110 [Фаршированные кабачки], 111 [Протеиновый коктейль на молоке], " +
                $"112 [Йогурт с мюсли], 113 [Ореховая смесь (30г)], " +
                $"114 [Фруктовый смузи], 115 [Творог с вареньем], " +
                $"116 [Творожное суфле с какао], 117 [Овсяное печенье с бананом], " +
                $"118 [Шоколадный протеиновый пудинг], 119 [Запеченные яблоки с медом], " +
                $"120 [Чиа-пудинг с кокосовым молоком]\n\n" +
                $"Оформи ответ в следующем формате: сначала сообщение, понятное для пользователя, в html без использования тега html. Для форматирования текста можешь использовать теги: " +
                $"h2, h3 - для заголовков разного размера, p - для параграфов, ul li ol - для списков, hr для разделения данных, например дней недели. " +
                $"После сообщения для пользователя установи разделитель с текстом \"===JSON===\", после чего оформи Json в соответствии со следующим примером:\n" +
                $"\"Номер дня недели (начинай с 0, имеется ввиду, что 0 - это понедельник)\": {{\n" +
                $"\"exercises\":[\n" +
                $"                {{\n" +
                $"                    \"name\": \"<a href=\"/Articles/Article/[ID упражнения из списка]\" Название упражнения ИЗ ПРЕДОСТАВЛЕННОГО СПИСКА</a>\",\n" +
                $"                    \"count\": \"Количество повторений x Количество подходов\",\n" +
                $"                }},\n" +
                $"                {{\n" +
                $"                    \"name\": \"<a href=\"/Articles/Article/[ID упражнения из списка]\" Название упражнения ИЗ ПРЕДОСТАВЛЕННОГО СПИСКА</a>\",\n" +
                $"                    \"count\": \"Количество повторений x Количество подходов\",\n" +
                $"                }},\n" +
                $"                ..." +
                $"              ]" +
                $"\"diet\":[\n" +
                $"                {{\n" +
                $"                    \"name\": \"<a href=\"/Articles/Article/[ID упражнения из списка]\" Название блюда ИЗ ПРЕДОСТАВЛЕННОГО СПИСКА (завтрак)</a>\",\n" +
                $"                    \"count\": \"Калорийность. Белки/жиры/углеводы (указать без единиц измерения)\",\n" +
                $"                }},\n" +
                $"                {{\n" +
                $"                    \"name\": \"<a href=\"/Articles/Article/[ID блюда из списка]\" Название блюда ИЗ ПРЕДОСТАВЛЕННОГО СПИСКА (обед)</a>\",\n" +
                $"                    \"count\": \"Калорийность. Белки/жиры/углеводы (указать без единиц измерения)\",\n" +
                $"                    \"link\": \"/Articles/Article/[ID блюда из списка]\"\n" +
                $"                }}\n," +
                $"                {{\n" +
                $"                    \"name\": \"<a href=\"/Articles/Article/[ID блюда из списка]\" Название блюда ИЗ ПРЕДОСТАВЛЕННОГО СПИСКА (ужин)</a>\"," +
                $"                    \"count\": \"Калорийность. Белки/жиры/углеводы (указать без единиц измерения)\",\n" +
                $"                }}\n," +
                $"            ],\n" +
                $"        \"extra\": \"exercises или diet могут быть пустыми, если это так, то запиши ответ в это поле\"\n" +
                $"}}\n" +
                $"ВАЖНО: Используй ТОЛЬКО упражнения из предоставленного списка упражнений (ID 0-60) и ТОЛЬКО блюда из предоставленного списка блюд (ID 61-120). " +
                $"Для каждого упражнения и блюда в JSON обязательно указывай соответствующую ссылку в формате /Articles/Article/[ID из списка].\n" +
                $"Пользователь: {request}";

            return prompt;
        }

        private async Task<string> CollectResponse(IAsyncEnumerable<StreamingChatCompletionUpdate> response)
        {
            System.Text.StringBuilder collectedResponse = new();

            await foreach (var item in response)
            {
                collectedResponse.Append(item);
            }

            return collectedResponse.ToString();
        }

        private string SanitizeJson(string json)
        {
            if (string.IsNullOrWhiteSpace(json))
                return "{}";

            // Удаляем Markdown обертки если есть
            json = json.Replace("```json", "").Replace("```", "").Trim();

            // Ищем начало и конец JSON
            int start = json.IndexOf('{');
            int end = json.LastIndexOf('}') + 1;

            if (start >= 0 && end > start)
            {
                return json[start..end];
            }

            Console.WriteLine($"Некорретный вид Json: {json}");
            return "{}";
        }
    }
}